#!/usr/bin/env ruby
# frozen_string_literal: true

ENV["APP_ENV"] = "production"

require "cryptoform"

class CryptoformCLI < Thor
  CRYPTOFOFILE = "Cryptofile"
  class << self
    def exit_on_failure?
      false
    end
  end

  desc "server", "run cryptoform server"
  option :cryptofile, type: :string, default: CRYPTOFOFILE
  def server
    Cryptoform.run!(File.read(options[:cryptofile]))
  end

  desc "validate", "validate your cryptofile"
  option :cryptofile, type: :string, default: CRYPTOFOFILE
  def validate
    Cryptoform.load_cryptofile!(File.read(options[:cryptofile]))
    puts "#{options[:cryptofile]} is valid!"
  rescue Cryptoform::ConfigValidationError => e
    puts "#{options[:cryptofile]} is invalid:"
    puts(e.message)
  end

  desc "init", "initialize project"
  option :cryptofile, type: :string, default: CRYPTOFOFILE
  option :generate_key, type: :boolean, default: true
  option :port, type: :numeric, default: 3000
  option :name, type: :string, default: "state"
  option :storage_backend, type: :string, default: "file"
  option :encryption_backend, type: :string, default: "diff_lockbox"
  option :force, type: :boolean, default: false
  def init # rubocop:disable Metrics/AbcSize, Metrics/MethodLength
    if File.exist?(cryptofile_path) && !options[:force]
      puts("#{cryptofile_path} already exists, is the project already initialized?")
      exit(1)
    end

    config_generator = Cryptoform::ConfigGenerator.new(
      **options.slice(:name, :port, :storage_backend, :encryption_backend).transform_keys(&:to_sym)
    )
    cryptofile = config_generator.generate_cryptofile
    config = Cryptoform.load_cryptofile!(cryptofile)

    if options[:generate_key]
      key = config.config.states[options[:name].to_sym].encryption_backend.generate_key
      puts("We generated a key for you, pass it to Cryptoform as \"CRYPTOFORM_KEY\" environment variable")
      puts("Key: #{key}")
    end

    File.write(cryptofile_path, cryptofile)
    puts("#{cryptofile_path} is written!")

    puts("Use this to configure you terraform backend:")
    puts(config_generator.generate_terraform_backend)

    puts("And this to configure a terraform remote state data source:")
    puts(config_generator.generate_terraform_remote_state_data_source)

    puts("All done, you can start using Cryptoform. To run the server execute:")
    command = "bundle exec cryptoform"
    command += " --cryptofile #{cryptofile_path}" if cryptofile_path != CRYPTOFOFILE

    puts(command)
  end

  default_command :server

  no_commands do
    def cryptofile_path
      options[:cryptofile]
    end
  end
end

CryptoformCLI.start(ARGV)
